package projecteuler;

/**
 * Even Fibonacci Numbers
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 * Source: https://projecteuler.net/problem=2
 */
public class EvenFibonacciNumbers {

    private static final int LIMIT = 4_000_000;

    public static void main(String[] args) {
        System.out.println(findSumEvenFibinacciNums1()); // 4.613.732
        System.out.println(findSumEvenFibinacciNums2()); // 4.613.732
    }

    // questions:
    // will result fit into int?

    // brute force:
    // count next fib num
    // if even add to sum

    // 1st solution
    private static int findSumEvenFibinacciNums1() {
        int a = 1;
        int b = 2;
        int sum = 0;

        do {
            if (b % 2 == 0 && b < LIMIT) {
                sum += b;
            }
            int temp = b;
            b = a + b;
            a = temp;
        } while (a < LIMIT);

        return sum;
    }

    // 2nd solution - recursion
    private static int findSumEvenFibinacciNums2() {
        return recursion(1, 2, 0);
    }

    private static int recursion(int a, int b, int sum) {
        // recursion will exit if a > LIMIT
        if (a >= LIMIT) {
            return sum;
        }

        // if (a is even) add a to sum
        if (a % 2 == 0) {
            sum += a;
        }

        return recursion(b, a + b, sum);
    }
}
