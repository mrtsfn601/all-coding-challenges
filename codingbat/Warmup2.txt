/**
stringTimes
Given a string and a non-negative int n, return a larger string that is n copies of the original string.
*/

public String stringTimes(String str, int n) {
  if (str == null) throw new NullPointerException();
  if (n < 0) throw new IllegalArgumentException(); // non-negative int is garanteed though

  StringBuilder result = new StringBuilder();

  for (int i = 0; i < n; i++) {
    result.append(str);
  }

  return result.toString();
}

/**
frontTimes
Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars, or whatever is there if the string is less than length 3. Return n copies of the front.
*/

public String frontTimes(String str, int n) {
  if (str == null) throw new NullPointerException();
  if (n < 0) throw new IllegalArgumentException(); // non-negative int is garanteed though

  StringBuilder result = new StringBuilder();
  String front = "";

  if (str.length() > 3) front = str.substring(0, 3);
  else front = str;

  for(int i = 0; i < n; i++) {
    result.append(front);
  }

  return result.toString();
}

/**
countXX
Count the number of "xx" in the given string. We'll say that overlapping is allowed, so "xxx" contains 2 "xx".
*/

int countXX(String str) {
  if (str == null) throw new NullPointerException();

  int count = 0;

  for(int i = 0; i < str.length() - 1; i++) {
    if (str.substring(i).startsWith("xx")) count++;
  }

  return count;
}

/**
doubleX
Given a string, return true if the first instance of "x" in the string is immediately followed by another "x".
*/

boolean doubleX(String str) {
  if (str == null) throw new NullPointerException();

  return str.indexOf("x") != -1
      && str.indexOf("x") == str.indexOf("xx");
}

// OR with improved time complexity
boolean doubleX(String str) {
  if (str == null) throw new NullPointerException();

  int index = str.indexOf("x");

  return index != -1
      && index + 1 < str.length()
      && str.charAt(index + 1) == 'x';
}

/**
stringBits
Given a string, return a new string made of every other char starting with the first, so "Hello" yields "Hlo".
*/

public String stringBits(String str) {
  if (str == null) throw new NullPointerException();

  StringBuilder result = new StringBuilder();

  for(int i = 0; i < str.length(); i += 2) {
    result.append(str.charAt(i));
  }

  return result.toString();
}

/**
stringSplosion
Given a non-empty string like "Code" return a string like "CCoCodCode".
*/

public String stringSplosion(String str) {
  if (str == null) throw new NullPointerException();

  StringBuilder result = new StringBuilder();

  for(int i = 0; i < str.length(); i++) {
    result.append(str.substring(0, i + 1));
  }

  return result.toString();
}