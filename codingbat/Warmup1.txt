/**
sleepIn
The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation.
We sleep in if it is not a weekday or we're on vacation. Return true if we sleep in.
*/

public boolean sleepIn(boolean weekday, boolean vacation) {
  return !weekday || vacation;
}

/**
monkeyTrouble
We have two monkeys, a and b, and the parameters aSmile and bSmile indicate if each is smiling.
We are in trouble if they are both smiling or if neither of them is smiling. Return true if we are in trouble.
*/

public boolean monkeyTrouble(boolean aSmile, boolean bSmile) {
  return (aSmile && bSmile) || (!aSmile && !bSmile));
}

// OR
public boolean monkeyTrouble(boolean aSmile, boolean bSmile) {
  return (aSmile == bSmile);
}

/**
sumDouble
Given two int values, return their sum. Unless the two values are the same, then return double their sum.
*/

// Option 1 with if-else
public int sumDouble(int a, int b) {
  int sum = a + b;

  if (a == b) return (2 * sum);

  return sum;
}

// Option 2 with ternary operator
public int sumDouble(int a, int b) {
  int sum = a + b;

  return (a == b) ? (2 * sum) : sum;
}

// Option 3 with custom check for integer overflow
public int sumDouble(int a, int b) {
  long res = (long) a + b;

  if (a == b) res *= 2;

  if (res > Integer.MAX_VALUE) throw new ArithmeticException("Integer overflow.");

  return (int) res;
}

// Option 4 with build-in Math methods that handle integer overflow exception
public int sumDouble(int a, int b) {
  int res = Math.addExact(a, b);

  if (a == b) res = Math.multiplyExact(res, 2);

  return (int) res;
}

/**
diff21
Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.
*/

// Option 1 with if-else
public int diff21(int n) {
  if (n > 21) return (2 * (n - 21));

  return (21 - n);
}

// Option 2 with Math.abs() that returns absolute value and ternary operator
public int diff21(int n) {
  int diff = Math.abs(n - 21);

  return (n > 21) ? (2 * diff) : diff;
}

// Option 3 with check for integer flow
public int diff21(int n) {
  int res = Math.subtractExact(n, 21); // handle integer overflow

  res = Math.abs(res); // get absolute value

  if (n > 21) res = Math.multiplyExact(res, 2); // handle integer overflow

  return res;
}


/**
parrotTrouble
We have a loud talking parrot. The "hour" parameter is the current hour time in the range 0..23.
We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return true if we are in trouble.
*/

public boolean parrotTrouble(boolean talking, int hour) {
  return (talking && (hour < 7 || hour > 20));
}

/**
makes10
Given 2 ints, a and b, return true if one of them is 10 or if their sum is 10.
*/

public boolean makes10(int a, int b) {
  return (a == 10) || (b == 10) || (a + b == 10);
}

/**
nearHundred
Given an int n, return true if it is within 10 of 100 or 200. Note: Math.abs(num) computes the absolute value of a number.
*/

public boolean nearHundred(int n) {
  return (90 <= n && n <= 110)
      || (190 <= n && n <= 210);
}

/**
posNeg
Given 2 int values, return true if one is negative and one is positive. Except if the parameter "negative" is true,
then return true only if both are negative.
*/

public boolean posNeg(int a, int b, boolean isNegative) {
  // if isNegative is true, then return true if both values are negative
  if (isNegative) return (a < 0 && b < 0);

  // return true if only one of the values is negative
  return (a < 0 && 0 <= b)
      || (b < 0 && 0 <= a);
}

/**
notString
Given a string, return a new string where "not " has been added to the front. However, if the string already begins
with "not", return the string unchanged. Note: use .equals() to compare 2 strings.
*/

public String notString(String str) {
  if (str == null) throw new NullPointerException();

  if (str.startsWith("not")) return str;

  return "not " + str;
}

// OR with ternary operator
public String notString(String str) {
  if (str == null) throw new NullPointerException();

  return str.startsWith("not") ? str : ("not " + str);
}

/**
missingChar
Given a non-empty string and an int n, return a new string where the char at index n has been removed.
The value of n will be a valid index of a char in the original string
(i.e. n will be in the range 0..str.length()-1 inclusive).
*/

public String missingChar(String str, int n) {
  if (str == null) throw new NullPointerException();

  if (n < 0 || n >= str.length()) throw new StringIndexOutOfBoundsException(n);

  return (str.substring(0, n) + str.substring(n + 1));
}

// OR with StringBuilder
public String missingChar(String str, int n) {
  if (str == null) throw new NullPointerException();

  // deleteCharAt() method checks if the index is out of bound
  return new StringBuilder(str).deleteCharAt(n).toString();
}

/**
frontBack
Given a string, return a new string where the first and last chars have been exchanged.
*/

public String frontBack(String str) {
  if (str == null) throw new NullPointerException();

  int length = str.length();

  if (length < 2) return str;

  char firstChar = str.charAt(0);
  char lastChar = str.charAt(length - 1);
  String mid = str.substring(1, length - 1);

  return lastChar + mid + firstChar;
}

/**
front3
Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3,
the front is whatever is there. Return a new string which is 3 copies of the front.
*/

public String front3(String str) {
  if (str == null) throw new NullPointerException();

  if (str.length() > 3) str = str.substring(0, 3);

  return str + str + str;
}

/**
backAround
Given a string, take the last char and return a new string with the last char added at the front and back,
so "cat" yields "tcatt". The original string will be length 1 or more.
*/

public String backAround(String str) {
  if (str == null) throw new NullPointerException();

  String lastChar = ""; // to handle empty string input

  if (!str.isEmpty()) lastChar = str.substring(str.length() - 1);

  return lastChar + str + lastChar;
}

/**
or35
Return true if the given non-negative number is a multiple of 3 or a multiple of 5. Use the % "mod" operator.
*/

public boolean or35(int n) {
  return (n % 3 == 0)
      || (n % 5 == 0);
}

/**
front22
Given a string, take the first 2 chars and return the string with the 2 chars added at both the front and back,
so "kitten" yields"kikittenki". If the string length is less than 2, use whatever chars are there.
*/

public String front22(String str) {
  if (str == null) throw new NullPointerException();

  if (str.length() < 2) return (str + str + str);

  String twoFirstChars = str.substring(0, 2);

  return (twoFirstChars + str + twoFirstChars);
}

/**
startHi
Given a string, return true if the string starts with "hi" and false otherwise.
*/

public boolean startHi(String str) {
  return str.startsWith("hi");
}

/**
icyHot
Given two temperatures, return true if one is less than 0 and the other is greater than 100.
*/

public boolean icyHot(int temp1, int temp2) {
  return temp1 < 0 && temp2 > 100
      || temp2 < 0 && temp1 > 100;
}

// OR interesting solution with build-in methods
public boolean icyHot(int temp1, int temp2) {
  return Math.min(temp1, temp2) < 0
      && Math.max(temp1, temp2) > 100;
}

/**
in1020
Given 2 int values, return true if either of them is in the range 10..20 inclusive.
*/

public boolean in1020(int a, int b) {
  return (10 <= a && a <= 20)
      || (10 <= b && b <= 20);
}

// OR interesting solution with build-in methods
public boolean in1020(int a, int b) {
  return Math.max(10, a) == Math.min(a, 20)
      || Math.max(10, b) == Math.min(b, 20);
}

/**
hasTeen
We'll say that a number is "teen" if it is in the range 13..19 inclusive.
Given 3 int values, return true if 1 or more of them are teen.
*/

public boolean hasTeen(int a, int b, int c) {
  return (a >= 13 && a <= 19)
      || (b >= 13 && b <= 19)
      || (c >= 13 && c <= 19);
}

// OR following Rule of three
/* It states that you are allowed to copy and paste the code once, but that when the same code is replicated three times,
   it should be extracted into a new procedure, e.g. helper method in this case. */

public boolean hasTeen(int a, int b, int c) {
  return isTeen(a) || isTeen(b) || isTeen(c);
}

private boolean isTeen(int n){
  return (13 <= n && n <= 19);
}

/**
loneTeen
We'll say that a number is "teen" if it is in the range 13..19 inclusive. Given 2 int values,
return true if one or the other is teen, but not both.
*/

public boolean loneTeen(int a, int b) {
  boolean isATeen = isTeen(a);
  boolean isBTeen = isTeen(b);

  // is one or the other is teen, but not both.
  return isATeen && !isBTeen
      || isBTeen && !isATeen;
}

private boolean isTeen(int n){
  return (13 <= n && n <= 19);
}

/**
delDel
Given a string, if the string "del" appears starting at index 1, return a string where that "del" has been deleted.
Otherwise, return the string unchanged.
*/

public String delDel(String str) {
  if (str.length() >= 4 && str.substring(1, 4).equals("del")) {
    return str.substring(0, 1) + str.substring(4);
  }

  return str;
}

// OR more dynamic
public String delDel(String str) {
  if (str == null) throw new NullPointerException();

  final String substr = "del";
  int start = 1;
  int end = substr.length();

  if (str.length() > end && str.substring(start, end + 1).equals(substr)) {
    return new StringBuilder(str).delete(start, end + 1).toString();
  }

  return str;
}

/**
mixStart
Return true if the given string begins with "mix", except the 'm' can be anything, so "pix", "9ix" .. all count.
*/

public boolean mixStart(String str) {
  if (str == null) throw new NullPointerException();

  return str.length() >= 3
      && str.substring(1, 3).equals("ix");
}

/**
startOz
Given a string, return a string made of the first 2 chars (if present), however include first char only if it is 'o'
and include the second only if it is 'z', so "ozymandias" yields "oz".
*/

public String startOz(String str) {
  if (str == null) throw new NullPointerException();

  String res = "";

  if (str.startsWith("o")) res += "o"; // include first char if it is 'o'

  if (str.length() >= 2 && str.charAt(1) == 'z') res += "z"; // include second char if it is 'z'

  return res;
}

// OR with StringBuilder
public String startOz(String str) {
  if (str == null) throw new NullPointerException();

  final StringBuilder res = new StringBuilder();

  if (str.startsWith("o")) res.append("o");

  if (str.length() >= 2 && str.charAt(1) == 'z') res.append("z");

  return res.toString();
}

/**
intMax
Given three int values, a b c, return the largest.
*/

public int intMax(int a, int b, int c) {
  return (Math.max(a, Math.max(b, c)));
}

/**
close10
Given 2 int values, return whichever value is nearest to the value 10, or return 0 in the event of a tie.
Note that Math.abs(n) returns the absolute value of a number.
*/

public int close10(int a, int b) {
  // Math.subtractExact() to handle integer overflow
  final int aDiff = Math.abs(Math.subtractExact(10, a));
  final int bDiff = Math.abs(Math.subtractExact(10, b));

  if (aDiff == bDiff) return 0; // in case of tie
  else if (aDiff > bDiff) return b; // the smaller difference the closer value to 10
  else return a;
}

// OR with ternary operator
public int close10(int a, int b) {
  final int aDiff = Math.abs(Math.subtractExact(10, a));
  final int bDiff = Math.abs(Math.subtractExact(10, b));

  return (aDiff == bDiff) ? 0 : (aDiff > bDiff) ? b : a;
}

/**
in3050
Given 2 int values, return true if they are both in the range 30..40 inclusive, or they are both in the range 40..50 inclusive.
*/

public boolean in3050(int a, int b) {
  final int min = Math.min(a, b);
  final int max = Math.max(a, b);

  return (30 <= min && max <= 40)
      || (40 <= min && max <= 50);
}

/**
max1020
Given 2 positive int values, return the larger value that is in the range 10..20 inclusive, or return 0 if neither is in that range.
*/

public int max1020(int a, int b) {
  // check if input is in the range
  final boolean isA = isInRange(a);
  final boolean isB = isInRange(b);

  // return correct value for true
  if (isA && isB) return Math.max(a, b);
  else if (isA) return a;
  else if (isB) return b;

  // otherwise - zero
  return 0;
}

private boolean isInRange(int n) {
  return 10 <= n && n <= 20;
}

/**
stringE
Return true if the given string contains between 1 and 3 'e' chars.
*/

public boolean stringE(String str) {
  if (str == null) throw new NullPointerException();

  int count = 0;

  for (int i = 0; i < str.length(); i++) {
    if (str.charAt(i) == 'e') count++;

    if (count > 3) return false;
  }

  return count > 0;
}

// OR with for-each loop
public boolean stringE(String str) {
  if (str == null) throw new NullPointerException();

  int count = 0;

  for(char c : str.toCharArray()) {
    if (c == 'e') count++;

    if (count > 3) return false;
  }

  return count > 0;
}

/**
lastDigit
Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57.
Note that the % "mod" operator computes remainders, so 17 % 10 is 7.
*/

public boolean lastDigit(int a, int b) {
  return a % 10 == b % 10;
}

/**
endUp
Given a string, return a new string where the last 3 chars are now in upper case. If the string has less than 3 chars,
uppercase whatever is there. Note that str.toUpperCase() returns the uppercase version of a string.
*/

public String endUp(String str) {
  if (str == null) throw new NullPointerException();

  final int length = str.length();

  if (length > 3) {
    return str.substring(0, length - 3) // front is original
         + str.substring(length - 3).toUpperCase(); // last 3 chars in UPPERcase
  }

  return str.toUpperCase();
}

/**
everyNth
Given a non-empty string and an int N, return the string made starting with char 0, and then every Nth char of the string.
So if N is 3, use char 0, 3, 6, ... and so on. N is 1 or more.
*/

public String everyNth(String str, int n) {
  final StringBuilder res = new StringBuilder();

  for (int i = 0; i < str.length(); i += n) {
      res.append(str.charAt(i));
  }

  return res.toString();
}